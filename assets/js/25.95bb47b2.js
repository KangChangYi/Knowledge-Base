(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{205:function(t,a,s){"use strict";s.r(a);var r=s(0),e=Object(r.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"零碎知识点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#零碎知识点","aria-hidden":"true"}},[t._v("#")]),t._v(" 零碎知识点")]),t._v(" "),s("h2",{attrs:{id:"uniapp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uniapp","aria-hidden":"true"}},[t._v("#")]),t._v(" uniapp")]),t._v(" "),s("p",[t._v("uniapp 内置 HTML5+ 引擎，让 js 可以调用原生能力，但是小程序和 H5 平台没有 HTML5+ 规范，所以在小程序和 H5 中没法使用。")]),t._v(" "),s("ul",[s("li",[t._v("5+ RunTime 是对 HTML5+ 规范的实现。")])]),t._v(" "),s("p",[t._v("HTML5+是一套 API，他打通了原生 API 和 JS API 的桥梁，可以理解为一个增强版的浏览器。uniapp 也是基于此实现的原生 api 的调用。\n在普通 H5 中时通过 document.addEventListener 来监听原生扩展事件，但是 uniapp 中没有 document, 是通过另外一个事件监听的方法来实现，plus.globalEvent.addEventListener")]),t._v(" "),s("h2",{attrs:{id:"骨架屏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#骨架屏","aria-hidden":"true"}},[t._v("#")]),t._v(" 骨架屏")]),t._v(" "),s("p",[t._v("骨架屏可通过手写 HTML 和 CSS 实现，但是维护成本太大，每次修改页面都要同步的去修改骨架屏样式，还有用图片的实现方式，自动化目前比较好的就只有 page-skeleton-webpack-plugin。")]),t._v(" "),s("p",[t._v("原理: 通过 puppeteer 在本地启动一个无头的 chrome 浏览器，在这个浏览器里面打开需要生成骨架屏的页面，然后这个插件就会递归遍历当前的 DOM 树，计算出哪些是文本块哪些是图片块，然后通过将这些块进行一个绘制，就生成了当前页面的骨架屏，保存之后就会在项目构建的时候插入到 HTML 里面。")]),t._v(" "),s("h2",{attrs:{id:"小程序双线程模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小程序双线程模型","aria-hidden":"true"}},[t._v("#")]),t._v(" 小程序双线程模型")]),t._v(" "),s("p",[t._v("小程序和普通的 Web 渲染模式不同，采用 Webview 线程渲染页面，JsCore线程执行 js 代码的双线程模型，避免了像在浏览器中 Js 引擎线程和 GUI 引擎线程互斥的问题，使其体验更接近原生 App。")]),t._v(" "),s("p",[t._v("渲染线程和 js 逻辑层的通信由 Native 做中转，网络请求也由 Native 转发，页面更新机制和虚拟 DOM 类似，在逻辑层数据需要发生变化的时候，通过 setData 方法把数据从逻辑层传递到 Native，然后由 Native 对比前后差异对页面进行更新。")]),t._v(" "),s("h3",{attrs:{id:"tip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tip","aria-hidden":"true"}},[t._v("#")]),t._v(" tip")]),t._v(" "),s("p",[t._v("浏览器每个页面为一个进程，每个进程有以下线程：")]),t._v(" "),s("ol",[s("li",[t._v("Js 引擎线程")]),t._v(" "),s("li",[t._v("渲染进程")]),t._v(" "),s("li",[t._v("定时器触发线程")]),t._v(" "),s("li",[t._v("事件触发线程")]),t._v(" "),s("li",[t._v("http请求线程")])]),t._v(" "),s("h2",{attrs:{id:"postcss-解决移动端适配问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#postcss-解决移动端适配问题","aria-hidden":"true"}},[t._v("#")]),t._v(" PostCss 解决移动端适配问题")]),t._v(" "),s("ol",[s("li",[t._v("使用 PostCss-px2rem 插件\n原理：根据当前的屏幕宽度，然后给根节点设置一个合适的 font-size，并且将 css 中的 px 转换为 rem。")])]),t._v(" "),s("h2",{attrs:{id:"移动端-1px-问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移动端-1px-问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 移动端 1px 问题")]),t._v(" "),s("ol",[s("li",[t._v("使用 PostCss-write-svg 解决 1px border 的问题")]),t._v(" "),s("li",[t._v("使用 border-image 配合媒体查询，在 dpr 是2 或者 3的时候使用 image。")])]),t._v(" "),s("h2",{attrs:{id:"移动端开发注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移动端开发注意事项","aria-hidden":"true"}},[t._v("#")]),t._v(" 移动端开发注意事项")]),t._v(" "),s("ol",[s("li",[t._v("在 head 中加入 meta 标签，对 viewport 进行一个设置，设置其 width = device-width，禁用用户的缩放操作，初始缩放值为 1。")])]),t._v(" "),s("h2",{attrs:{id:"ios-android-和-h5-的通信原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ios-android-和-h5-的通信原理","aria-hidden":"true"}},[t._v("#")]),t._v(" ios Android 和 H5 的通信原理")]),t._v(" "),s("ol",[s("li",[t._v("js 方面使用 alert，prompt，confirm 进行弹窗，然后 Native 对弹窗进行拦截，并且获取其中的值。")]),t._v(" "),s("li",[t._v("js 方通过创建 iframe 并对其设置 src，并且对其隐藏，然后 Native 同样可以进行拦截，判断 src 是否在提前约定好的通信规则中，如果是则获取其中的值（使用 iframe 不会引起页面刷新）\n这个方案首先需要指定一套URL规则。")]),t._v(" "),s("li",[t._v("Native 可以通过 webview 的 api 直接执行 js 代码，或者在其中注入方法（因为原生端有 JavaScriptCore，可以解析 js 代码）。")]),t._v(" "),s("li",[t._v("jsBridge，其实就是一个封装好的，基于 URL 这个方法和原生进行交互的一个库。")])]),t._v(" "),s("h2",{attrs:{id:"性能优化可以做的事情"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能优化可以做的事情","aria-hidden":"true"}},[t._v("#")]),t._v(" 性能优化可以做的事情")]),t._v(" "),s("h3",{attrs:{id:"代码层面优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码层面优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码层面优化")]),t._v(" "),s("ol",[s("li",[t._v("减少 DOM 的访问次数，将 DOM 尽可能的存储到变量中访问。（原因：js引擎 和 渲染引擎之间的通信存在开销）")]),t._v(" "),s("li",[t._v("减少回流（重排）的次数，回流必定引起重绘。")])]),t._v(" "),s("p",[t._v("导致回流的操作有：")]),t._v(" "),s("ul",[s("li",[t._v("DOM 树的变化（节点的增删改）")]),t._v(" "),s("li",[t._v("浏览器窗口的大小改变")]),t._v(" "),s("li",[t._v("元素的 offset 和 client 相关的属性，因为浏览器需要去计算获得。")])]),t._v(" "),s("p",[t._v("解决办法：")]),t._v(" "),s("ul",[s("li",[t._v("尽量把多次 DOM 操作放在同一个时间内执行，这也是框架替我们做的事情。")]),t._v(" "),s("li",[t._v("如果要多次插入 DOM 节点，先放到 Document.fragument 里面然后一次性插入。")]),t._v(" "),s("li",[t._v("避免多次读取例如 offset 和 client 之类的属性。")]),t._v(" "),s("li",[t._v("将复杂的动效元素用绝对定位和正常流隔离开")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("将 Js 文件放在 css 渲染的最后面（SPA 项目无效）")])]),t._v(" "),s("h3",{attrs:{id:"感知速度优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#感知速度优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 感知速度优化")]),t._v(" "),s("ol",[s("li",[t._v("骨架屏")]),t._v(" "),s("li",[t._v("loading 过渡动画")]),t._v(" "),s("li",[t._v("如果在页面进入的时候有大量的计算密集型的操作，可能会导致渲染阻塞，可以使用 Web Worker 去执行一部分的代码，避免阻塞。\nWeb Worker知识点：")])]),t._v(" "),s("ul",[s("li",[t._v("Worker 的兼容性为 IE10+ 96%;")]),t._v(" "),s("li",[t._v("通过 Web Worker 的 postMessage 方法给 worker 传递数据，子线程也同样。")]),t._v(" "),s("li",[t._v("主线程使用 worker 实例的 onmessage 方法指定监听函数。")]),t._v(" "),s("li",[t._v("worker 内部 通过 addEventListener 监听 onmessage 事件，可在全局对象 this 上监听或者不写也可以。")]),t._v(" "),s("li",[t._v("如果 worker 内部需要加载资源有专门的方法：importScripts('..')，可以同时加载多个脚本。")]),t._v(" "),s("li",[t._v("主线程可以通过监听 worker 对象的 onerror 事件处理错误。")]),t._v(" "),s("li",[t._v("使用完毕之后需要关闭，不然会一直占据资源。 主线程关闭：worker.terminate()，worker 自己关闭 this.close()")])]),t._v(" "),s("h3",{attrs:{id:"构建层面优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建层面优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 构建层面优化")]),t._v(" "),s("ol",[s("li",[t._v("Tree-shaking\n原理：在构建时不打包无用代码，减少文件体积，基于 ES6 的静态模块加载。")]),t._v(" "),s("li",[t._v("Scope-hoisting\n原理：检查 import 链，将只被使用了一次的模块合并到一起。")]),t._v(" "),s("li",[t._v("Code-splitting\n原理：将代码分离到不同的 bundle，然后就可以对代码进行按需加载，不用一下子就加载所有文件。")]),t._v(" "),s("li",[t._v("使用前端框架的 SSR，不用像 SPA 一样等 JS 执行完了再挂载 DOM，加快首屏渲染，当时如果流量大的情况下需要考虑服务器的压力。")]),t._v(" "),s("li",[t._v("使用浏览器缓存（强缓存，协商缓存）")]),t._v(" "),s("li",[t._v("图片及代码的压缩")])]),t._v(" "),s("h3",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他","aria-hidden":"true"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("ol",[s("li",[t._v("CDN，在 CDN 上存储静态资源文件，减少文件请求时间。\nCDN的本质上是将媒体资源，动静态图片（Flash），HTML，CSS，JS等等内容缓存到距离你更近的IDC，从而让用户进行共享资源，实现缩减站点间的响应时间等等需求，而网游加速器的本质则是通过建立高带宽机房，架设多节点服务器来为用户进行加速。")])]),t._v(" "),s("h1",{attrs:{id:"css"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css","aria-hidden":"true"}},[t._v("#")]),t._v(" CSS")]),t._v(" "),s("h2",{attrs:{id:"grid-布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#grid-布局","aria-hidden":"true"}},[t._v("#")]),t._v(" Grid 布局")]),t._v(" "),s("h3",{attrs:{id:"基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础","aria-hidden":"true"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),s("p",[t._v("使用")]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[t._v("\x3c!-- 块级 grid --\x3e\n"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" grid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\x3c!-- 行内 grid --\x3e\n"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" inline-grid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("属性为一个元素添加 Grid 布局，其中 Grid 布局的最外层元素称为容器，容器的最外层子元素被称为项目。")]),t._v(" "),s("h3",{attrs:{id:"相关属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 相关属性")]),t._v(" "),s("ul",[s("li",[t._v("定义行宽列高")])]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" grid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("grid-template-columns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50px 50px 50px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("grid-template-rows")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100px 100px 100px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面两行代码定义了一个三行三列的 grid 容器，并且其中列宽均是 50px，行高 均是 100px，单位还可以是百分比。")]),t._v(" "),s("ul",[s("li",[t._v("使用 repeat() 函数替代重复值\nrepeat() 函数用法：")])]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" grid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("grid-template-columns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("repeat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 50px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("grid-template-rows")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("repeat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 100px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("第一个参数是重复次数，第二个是要重复的值。")]),t._v(" "),s("ul",[s("li",[t._v("auto-fill 关键字\n有时候容器的宽度是不固定的，但是项目的宽度是固定的，如果我们想每一行尽可能的多容纳一些项目，则可以使用 "),s("code",[t._v("auto-fill")])])]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" grid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("grid-template-columns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("repeat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("auto-fill"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 50px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("fr 关键字\n"),s("code",[t._v("fr")]),t._v(" 关键字类似于 "),s("code",[t._v("display")]),t._v(" 布局中的  "),s("code",[t._v("flex")]),t._v(" 属性，用户表示项目之间的比例关系，例如 "),s("code",[t._v("fr: 1")]),t._v(" 和 "),s("code",[t._v("fr: 2")]),t._v("，则 2 是 1 的两倍。")])]),t._v(" "),s("p",[t._v("可以和绝对单位配合使用，非常方便。")]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" grid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("grid-template-columns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 150px 1fr 2fr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("第三列的宽度是第一列的两倍。")]),t._v(" "),s("ul",[s("li",[t._v("minmax() 函数\n使用 minman() 函数产生一个长度范围，接受两个参数，最大值和最小值。")])]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("grid-template-columns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1fr 1fr "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("minman")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("100px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 1fr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("表示不小于 100px，不大于 1fr。")]),t._v(" "),s("ul",[s("li",[t._v("auto 关键字\n使用了 auto 关键字的对应宽和高将会根据剩余宽度自适应大小。")])]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("grid-template-columns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100px auto 100px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("以上代码实现了两边固定，中间自适应大小的布局。")]),t._v(" "),s("ul",[s("li",[t._v("网格线名称\n通过在 "),s("code",[t._v("grid-template-columns")]),t._v(" 和 "),s("code",[t._v("grid-template-rows")]),t._v(" 中使用方括号，给每一根网格线指定名称，方便以后引用。")])]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("grid-template-columns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" [c1] 100px [c2] 100px [c3] auto [c4]"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("grid-template-rows")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" [r1] 100px [r2] 100px [r3] auto [r4]"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面代码，第一根竖网格线名称为 "),s("code",[t._v("c1")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("行间距与列间距\n通过 "),s("code",[t._v("grid-row-gap")]),t._v(" 和 "),s("code",[t._v("grid-column-gap")]),t._v(" 设置行与行，列与列的间距。")])])])},[],!1,null,null,null);a.default=e.exports}}]);